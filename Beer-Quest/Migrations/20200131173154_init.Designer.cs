// <auto-generated />
using System;
using Beer_Quest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Beer_Quest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200131173154_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Beer_Quest.Models.Brewery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CheersCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Brewery");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheersCount = 0,
                            City = "Nashville",
                            Name = "Tennessee Brew Works",
                            Phone = "(615)436-0050",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            ZipCode = 37203
                        },
                        new
                        {
                            Id = 2,
                            CheersCount = 0,
                            City = "Nashville",
                            Name = "Czans",
                            Phone = "(615)748-1399",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            ZipCode = 37203
                        },
                        new
                        {
                            Id = 3,
                            CheersCount = 0,
                            City = "Nashville",
                            Name = "Yee Haw",
                            Phone = "(615)647-8272",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            ZipCode = 37203
                        },
                        new
                        {
                            Id = 4,
                            CheersCount = 0,
                            City = "Nashville",
                            Name = "Jackalope",
                            Phone = "(615) 873-4313",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff",
                            ZipCode = 37203
                        });
                });

            modelBuilder.Entity("Beer_Quest.Models.Cheer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BreweryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cheer");
                });

            modelBuilder.Entity("Beer_Quest.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BreweryId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Beer_Quest.Models.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlcoholPercent")
                        .HasColumnType("float");

                    b.Property<int>("BreweryId")
                        .HasColumnType("int");

                    b.Property<int>("DrinkTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("HouseFav")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BreweryId");

                    b.ToTable("Drink");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlcoholPercent = 4.5,
                            BreweryId = 1,
                            DrinkTypeId = 1,
                            HouseFav = true,
                            Name = "State Park Blonde"
                        },
                        new
                        {
                            Id = 2,
                            AlcoholPercent = 6.0,
                            BreweryId = 1,
                            DrinkTypeId = 2,
                            HouseFav = true,
                            Name = "Hippies and Cowboys"
                        },
                        new
                        {
                            Id = 3,
                            AlcoholPercent = 5.0999999999999996,
                            BreweryId = 1,
                            DrinkTypeId = 3,
                            HouseFav = false,
                            Name = "Southern Wit"
                        },
                        new
                        {
                            Id = 4,
                            AlcoholPercent = 7.5,
                            BreweryId = 1,
                            DrinkTypeId = 2,
                            HouseFav = false,
                            Name = "1927 IPA"
                        },
                        new
                        {
                            Id = 5,
                            AlcoholPercent = 5.25,
                            BreweryId = 1,
                            DrinkTypeId = 4,
                            HouseFav = false,
                            Name = "Extra Easy Ale"
                        },
                        new
                        {
                            Id = 6,
                            AlcoholPercent = 6.0,
                            BreweryId = 1,
                            DrinkTypeId = 2,
                            HouseFav = false,
                            Name = "Cutaway Rye IPA"
                        },
                        new
                        {
                            Id = 7,
                            AlcoholPercent = 10.0,
                            BreweryId = 1,
                            DrinkTypeId = 5,
                            HouseFav = false,
                            Name = "Secret City Imperial IPA"
                        },
                        new
                        {
                            Id = 8,
                            AlcoholPercent = 10.0,
                            BreweryId = 1,
                            DrinkTypeId = 6,
                            HouseFav = false,
                            Name = "Colts Bolts"
                        },
                        new
                        {
                            Id = 9,
                            AlcoholPercent = 8.5,
                            BreweryId = 1,
                            DrinkTypeId = 7,
                            HouseFav = false,
                            Name = "Old Burton Extra (OBE)"
                        },
                        new
                        {
                            Id = 10,
                            AlcoholPercent = 5.0,
                            BreweryId = 1,
                            DrinkTypeId = 8,
                            HouseFav = false,
                            Name = "Key of Lime"
                        },
                        new
                        {
                            Id = 11,
                            AlcoholPercent = 8.0,
                            BreweryId = 1,
                            DrinkTypeId = 9,
                            HouseFav = false,
                            Name = "Basil Ryeman"
                        },
                        new
                        {
                            Id = 12,
                            AlcoholPercent = 5.4000000000000004,
                            BreweryId = 1,
                            DrinkTypeId = 10,
                            HouseFav = false,
                            Name = "Hopped and Devoted"
                        },
                        new
                        {
                            Id = 13,
                            AlcoholPercent = 4.5,
                            BreweryId = 1,
                            DrinkTypeId = 11,
                            HouseFav = false,
                            Name = "Mild Davis"
                        },
                        new
                        {
                            Id = 14,
                            AlcoholPercent = 4.9000000000000004,
                            BreweryId = 1,
                            DrinkTypeId = 12,
                            HouseFav = false,
                            Name = "Pie Town Session Porter"
                        },
                        new
                        {
                            Id = 15,
                            AlcoholPercent = 4.2000000000000002,
                            BreweryId = 1,
                            DrinkTypeId = 13,
                            HouseFav = false,
                            Name = "Session IPA"
                        },
                        new
                        {
                            Id = 16,
                            AlcoholPercent = 6.2000000000000002,
                            BreweryId = 2,
                            DrinkTypeId = 4,
                            HouseFav = false,
                            Name = "Czann's Oatmeal Stout"
                        },
                        new
                        {
                            Id = 17,
                            AlcoholPercent = 5.5,
                            BreweryId = 2,
                            DrinkTypeId = 4,
                            HouseFav = false,
                            Name = "Czann’s Dunkelweizen"
                        },
                        new
                        {
                            Id = 18,
                            AlcoholPercent = 4.25,
                            BreweryId = 2,
                            DrinkTypeId = 17,
                            HouseFav = false,
                            Name = "Czann's Blonde"
                        },
                        new
                        {
                            Id = 19,
                            AlcoholPercent = 5.25,
                            BreweryId = 2,
                            DrinkTypeId = 16,
                            HouseFav = false,
                            Name = "Czann's Pale Ale"
                        },
                        new
                        {
                            Id = 20,
                            AlcoholPercent = 6.2000000000000002,
                            BreweryId = 2,
                            DrinkTypeId = 18,
                            HouseFav = false,
                            Name = "Czann's IPA"
                        },
                        new
                        {
                            Id = 21,
                            AlcoholPercent = 5.7000000000000002,
                            BreweryId = 3,
                            DrinkTypeId = 19,
                            HouseFav = false,
                            Name = "Pale Ale"
                        },
                        new
                        {
                            Id = 22,
                            AlcoholPercent = 5.0,
                            BreweryId = 3,
                            DrinkTypeId = 20,
                            HouseFav = false,
                            Name = "Eighty"
                        },
                        new
                        {
                            Id = 23,
                            AlcoholPercent = 5.5,
                            BreweryId = 3,
                            DrinkTypeId = 21,
                            HouseFav = true,
                            Name = "Dunkel"
                        },
                        new
                        {
                            Id = 24,
                            AlcoholPercent = 6.7000000000000002,
                            BreweryId = 3,
                            DrinkTypeId = 18,
                            HouseFav = false,
                            Name = "IPA"
                        },
                        new
                        {
                            Id = 25,
                            AlcoholPercent = 5.5,
                            BreweryId = 4,
                            DrinkTypeId = 19,
                            HouseFav = false,
                            Name = "Thunder Ann"
                        },
                        new
                        {
                            Id = 26,
                            AlcoholPercent = 5.0,
                            BreweryId = 4,
                            DrinkTypeId = 22,
                            HouseFav = true,
                            Name = "Bearwalker"
                        },
                        new
                        {
                            Id = 27,
                            AlcoholPercent = 4.7999999999999998,
                            BreweryId = 4,
                            DrinkTypeId = 23,
                            HouseFav = false,
                            Name = "Sarka"
                        },
                        new
                        {
                            Id = 28,
                            AlcoholPercent = 5.5999999999999996,
                            BreweryId = 4,
                            DrinkTypeId = 23,
                            HouseFav = false,
                            Name = "Rompo Red Rye"
                        },
                        new
                        {
                            Id = 29,
                            AlcoholPercent = 7.2000000000000002,
                            BreweryId = 4,
                            DrinkTypeId = 2,
                            HouseFav = false,
                            Name = "Fennario"
                        });
                });

            modelBuilder.Entity("Beer_Quest.Models.DrinkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DrinkType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "American Blonde Ale"
                        },
                        new
                        {
                            Id = 2,
                            Name = "India Pale Ale"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Belgian-Style White/Witbier"
                        },
                        new
                        {
                            Id = 4,
                            Name = "English-Style Pub Ale"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Imperial India Pale Ale"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Imperial Stout"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Tenn Whisky Barrel-Aged English Strong Ale"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Key Lime Hazy India Pale Ale"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Saison / Farmhouse Ale"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Hazy Pale Ale"
                        },
                        new
                        {
                            Id = 11,
                            Name = "English-Style Mild Ale"
                        },
                        new
                        {
                            Id = 12,
                            Name = "American Session Porter"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Session India Pale Ale"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Stout"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Dark Wheat"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Pale Ale"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Blonde Ale"
                        },
                        new
                        {
                            Id = 18,
                            Name = "IPA"
                        },
                        new
                        {
                            Id = 19,
                            Name = "American Pale Ale"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Scottish Style Ale"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Dark Lager"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Maple Brown Ale"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Bohemian Pilsner"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Red Rye Ale"
                        });
                });

            modelBuilder.Entity("Beer_Quest.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserTypeName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            UserTypeName = "Brew Admin"
                        },
                        new
                        {
                            Id = 3,
                            UserTypeName = "Non-Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Bangazon.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Birthday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "00000000-ffff-ffff-ffff-ffffffffffff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e05773ae-afa9-4c35-a21f-a69c658dde27",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEItDqxT0F9G6wpEPplUY0rbtpeqsejU2oynZualaZYuGIkqB5Qkt/H8fM+Cuphar7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f434309-a4d9-48e9-9ebb-8803db794577",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com",
                            Birthday = "04-29-1997",
                            FirstName = "admin",
                            LastName = "admin",
                            Phone = "(989)464-5890",
                            UserTypeId = 1
                        });
                });

            modelBuilder.Entity("Beer_Quest.Models.Drink", b =>
                {
                    b.HasOne("Beer_Quest.Models.Brewery", "Brewery")
                        .WithMany("Drinks")
                        .HasForeignKey("BreweryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
